## 4. Додамо завантаження зображеннь

Нам потрібно встановити додаткову бібліотеку яка дозволить завантажувати файли.

З допомогою текстового редактора відкриємо `Gemfile` в директорії проекту і під рядком

```ruby
gem 'sqlite3'
```

додамо

```ruby
gem 'carrierwave'
```

**Тренер:** Пояснити що таке бібліотеки і чим вони корисні, пояснити що таке вільне програмне забезпечення (open source)

Натиснемо `CTRL-C` в терміналі щоб зупинити сервер.

В терміналі запустимо:

```sh
bundle
```
Це встановить бібліотеку додану до `Gemfile`.

Тепер ми можемо згенерувати код який буде відповідати за завантаження. Запустимо  в терміналі:

```sh
rails generate uploader Picture
```

Після цього запустимо сервер rails.


*Увага*: Дехто може використовувати другий термінал у якому постійно запущений сервер Rails. В даному випадку потрібно **перезапустити Rails процес**. Це необхідно для того щоб аплікація завантажила додану бібліотеку.

Відкриємо `app/models/idea.rb` і під рядком

```ruby
class Idea < ActiveRecord::Base
```

додамо

```ruby
mount_uploader :picture, PictureUploader
```

Відкриємо `app/views/ideas/_form.html.erb` і замінимо

```erb
<%= f.text_field :picture %>
```

на

```erb
<%= f.file_field :picture %>
```

Інколи може виникати помилка *TypeError: can't cast ActionDispatch::Http::UploadedFile to string*.

Якщо це трапилось, у файлі `app/views/ideas/_form.html.erb` потрібно замінити рядок

```erb
<%= form_for(@idea) do |f| %>
```

на

```erb
<%= form_for @idea, :html => {:multipart => true} do |f| %>
```

У своєму браузері додамо нову ідею з зображенням. На жаль отриманий результат не надто красивий оскільки замість картинки ми бачимо лиш шлях до неї, давайте виправимо це:

 Відкриємо `app/views/ideas/show.html.erb` і замінимо

```erb
<%= @idea.picture %>
```

на

```erb
<%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>
```

Тепер можна оновити сторінку в браузері і милуватись завантаженим зображенням.

**Тренер:** Розкажи трішки про HTML.
